

# # # config:
# # #   target: "http://localhost:5000"   # Backend URL
# # #   phases:
# # #     - duration: 60                  # Run test for 60 seconds
# # #       arrivalRate: 10                # 10 new users per second
# # #   engines:
# # #     socketio: {}
# # #   processor: "./load-test-functions.js"

# # # scenarios:
# # #   - name: "REST API + Chat Simulation"
# # #     flow:
# # #       - get:
# # #           url: "/api/appointments"

# # #       - post:
# # #           url: "/api/messages"
# # #           json:
# # #             appointmentId: "test-appointment-id"
# # #             senderId: "user1"
# # #             content: "{{ randomMessage }}"

# # #       - engine: socketio
# # #         flow:
# # #           - emit: ["joinRoom", { room: "test-room" }]
# # #           - think: 1
# # #           - emit: ["sendMessage", { text: "{{ randomMessage }}" }]
# # #           - think: 1









# # config:
# #   target: "http://localhost:5000"
# #   phases:
# #     - duration: 60
# #       arrivalRate: 10
# #   engines:
# #     socketio: {}
# #   processor: "./load-test-functions.js"

# # scenarios:
# #   - name: "REST API + Chat Simulation"
# #     engine: socketio
# #     flow:
# #       - get:
# #           url: "/api/appointments"

# #       - post:
# #           url: "/api/messages"
# #           json:
# #             appointmentId: "test-appointment-id"
# #             senderId: "user1"
# #             content: "{{ randomMessage }}"

# #       - emit:
# #           channel: "joinRoom"
# #           data:
# #             room: "test-room"

# #       - think: 1

# #       - emit:
# #           channel: "sendMessage"
# #           data:
# #             text: "{{ randomMessage }}"

# #       - think: 1


















# config:
#   target: "http://localhost:5000"
#   phases:
#     - duration: 60
#       arrivalRate: 10
#       name: "Load Test"
#   engines:
#     socketio:
#       headers:
#         Authorization: "Bearer {{ authToken }}" # Include JWT in Socket.IO connection if required
#   processor: "./load-test-functions.js"

# scenarios:
#   - name: "REST API + Chat Simulation"
#     engine: socketio
#     flow:
#       # Step 1: Authenticate to get JWT token
#       - post:
#           url: "/api/auth/login"
#           json:
#             email: "user@gmail.com" # Replace with valid username
#             password: "123456789a" # Replace with valid password
#           capture:
#             json: "$.token" # Adjust path based on your API's response (e.g., $.accessToken)
#             as: "accessToken"
#       # Step 2: GET request to /api/appointments with JWT
#       - get:
#           url: "/api/all-appointments"
#           headers:
#             Authorization: "Bearer {{ accessToken }}"
#       # Step 3: POST request to /api/messages with JWT
#       - post:
#           url: "/api/messages"
#           headers:
#             Authorization: "Bearer {{ accessToken }}"
#           json:
#             appointmentId: "test-appointment-id" # Ensure this ID exists
#             senderId: "user1" # Ensure this user ID is valid
#             content: "{{ randomMessage }}"
#       # Step 4: Socket.IO joinRoom event (include JWT if required)
#       - emit:
#           channel: "joinRoom"
#           data:
#             room: "test-room"
#             token: "{{ authToken }}" # Include if Socket.IO requires token
#           ack: true
#           response:
#             on: "roomJoined" # Adjust to your server's response event
#             matches:
#               status: "success" # Adjust based on your server's response
#       - think: 1
#       # Step 5: Socket.IO sendMessage event (include JWT if required)
#       - emit:
#           channel: "sendMessage"
#           data:
#             text: "{{ randomMessage }}"
#             token: "{{ authToken }}" # Include if Socket.IO requires token
#           ack: true
#           response:
#             on: "messageSent" # Adjust to your server's response event
#             matches:
#               status: "success" # Adjust based on your server's response
#       - think: 1









# config:
#   target: "http://localhost:5000"
#   phases:
#     - duration: 10 # Short duration for debugging
#       arrivalRate: 1 # Low rate to reduce noise
#       name: "Debug Login Test"
#   processor: "./load-test-functions.js"

# scenarios:
#   - name: "Authenticate and Test API"
#     flow:
#       - post:
#           url: "/api/auth/login"
#           headers:
#             Content-Type: "application/json"
#           json:
#             email: "user@gmail.com" # Replace with valid email
#             password: "123456789a" # Replace with valid password
#           capture:
#             json: "$.token" # Adjust to match response (e.g., $.accessToken)
#             as: "accessToken"
#           afterResponse: "handleLoginResponse" # Log response for debugging
#       - get:
#           url: "/api/all-appointments"
#           headers:
#             Authorization: "Bearer {{ accessToken }}"


















# config:
#   target: "http://localhost:5000"
#   phases:
#     - duration: 10 # Short duration for debugging
#       arrivalRate: 1 # Single user to minimize load
#       name: "Debug Login Test"
#   processor: "./load-test-functions.js"
#   variables:
#     accessToken: "none" # Global variable to store JWT token

# scenarios:
#   - name: "Authenticate and Test API"
#     flow:
#       - post:
#           url: "/api/auth/login"
#           headers:
#             Content-Type: "application/json"
#           json:
#             email: "user@gmail.com" # Valid credentials
#             password: "123456789a"
#           capture:
#             json: "$.accessToken" # Fixed to match response structure
#             as: "accessToken"
#           afterResponse: "handleLoginResponse"
#       - function: "storeToken" # Store token globally
#       - get:
#           url: "/api/all-appointments"
#           headers:
#             Authorization: "Bearer {{ accessToken }}"

















# config:
#   target: "http://localhost:5000"
#   phases:
#     - duration: 10
#       arrivalRate: 1
#       name: "Debug Login Test"
#   processor: "./load-test-functions.js"
#   variables:
#     accessToken: "none"

# scenarios:
#   - name: "Authenticate and Test API"
#     flow:
#       - post:
#           url: "/api/auth/login"
#           headers:
#             Content-Type: "application/json"
#           json:
#             email: "user@gmail.com"
#             password: "123456789a"
#           capture:
#             json: "$.accessToken"
#             as: "accessToken"
#           afterResponse: "handleLoginResponse"
#       - function: "storeToken"
#       - get:
#           url: "/api/all-appointments"
#           headers:
#             Authorization: "Bearer {{ accessToken }}"














# config:
#   target: "http://localhost:5000"
#   phases:
#     - duration: 10
#       arrivalRate: 1
#       name: "Debug Login Test"
#   processor: "./load-test-functions.js"
#   variables:
#     accessToken: "none"

# scenarios:
#   - name: "Authenticate and Test API"
#     flow:
#       - post:
#           url: "/api/auth/login"
#           headers:
#             Content-Type: "application/json"
#           json:
#             email: "user@gmail.com"
#             password: "123456789a"
#           capture:
#             json: "$.accessToken"
#             as: "accessToken"
#           afterResponse: "handleLoginResponse"
#       - function: "storeToken"
#       - if: "{{ accessToken !== 'none' }}"
#         then:
#           - get:
#               url: "/api/all-appointments"
#               headers:
#                 Authorization: "Bearer {{ accessToken }}"















# config:
#   target: "http://localhost:5000"
#   phases:
#     - duration: 10
#       arrivalRate: 1
#       name: "Debug Login Test"
#   processor: "./load-test-functions.js"
#   variables:
#     accessToken: "none"

# scenarios:
#   - name: "Authenticate and Test API"
#     flow:
#       - post:
#           url: "/api/auth/login"
#           headers:
#             Content-Type: "application/json"
#           json:
#             email: "user@gmail.com"
#             password: "123456789a"
#           capture:
#             json: "$.accessToken"
#             as: "accessToken"
#           afterResponse: "handleLoginResponse"
#       - function: "storeToken"
#       - loop:
#           -
#             get:
#               url: "/api/all-appointments"
#               headers:
#                 Authorization: "Bearer {{ accessToken }}"
#           while: "{{ accessToken !== 'none' }}"















config:
  target: "http://localhost:5000"
  phases:
    - duration: 10
      arrivalRate: 1
      name: "Debug Login Test"
  processor: "./load-test-functions.js"

scenarios:
  - name: "Authenticate and Test API"
    flow:
      - post:
          url: "/api/auth/login"
          headers:
            Content-Type: "application/json"
          json:
            email: "user@gmail.com"
            password: "123456789a"
          capture:
            json: "$.accessToken"
            as: "accessToken"
          afterResponse: "handleLoginResponse"
      - get:
          url: "/api/all-appointments"
          headers:
            Authorization: "Bearer {{ accessToken }}"