"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const appointment_repositories_1 = require("../repositories/implementation/appointment.repositories");
const appointment_services_1 = require("../services/implementation/appointment.services");
const appointment_controller_1 = require("../controllers/implementation/appointment.controller");
const auth_middleware_1 = require("../middlewares/auth.middleware");
const doctorProfile_repositories_1 = require("../repositories/implementation/doctorProfile.repositories");
const patientProfile_repositories_1 = require("../repositories/implementation/patientProfile.repositories");
const user_repositories_1 = require("../repositories/implementation/user.repositories");
const chat_repositories_1 = require("../repositories/implementation/chat.repositories");
const wallet_repository_1 = require("../repositories/implementation/wallet.repository");
const walletHistory_repository_1 = require("../repositories/implementation/walletHistory.repository");
const router = (0, express_1.Router)();
const appointmentRepository = new appointment_repositories_1.AppointmentRepository();
const doctorProfileRepository = new doctorProfile_repositories_1.DoctorProfileRepository();
const patientProfileRepository = new patientProfile_repositories_1.PatientProfileRepository();
const chatRepository = new chat_repositories_1.ChatRepository();
const userRepository = new user_repositories_1.UserRepository();
const walletRepository = new wallet_repository_1.WalletRepository();
const walletHistoryRepository = new walletHistory_repository_1.WalletHistoryRepository();
const appointmentService = new appointment_services_1.AppointmentService(appointmentRepository, doctorProfileRepository, patientProfileRepository, userRepository, chatRepository, walletRepository, walletHistoryRepository);
const appointmentController = new appointment_controller_1.AppointmentController(appointmentService);
router.use(auth_middleware_1.verifyAccessToken);
router.post("/create-appointment", appointmentController.createAppointment.bind(appointmentController));
router.get("/all-createAppointments/:doctorId", appointmentController.getCreateAppointment.bind(appointmentController));
router.get("/user-appointments/:userId", appointmentController.getUserAppointments.bind(appointmentController));
router.get("/doctor-appointments", appointmentController.getDoctorAppointments.bind(appointmentController));
router.get("/all-appointments", appointmentController.getAllAppointments.bind(appointmentController));
router.patch("/cancel-appointment/:appointmentId", appointmentController.updateStatus.bind(appointmentController));
exports.default = router;
