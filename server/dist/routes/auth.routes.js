"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_controller_1 = require("../controllers/implementation/auth.controller");
const auth_services_1 = require("../services/implementation/auth.services");
const user_repositories_1 = require("../repositories/implementation/user.repositories");
const otp_repositories_1 = require("../repositories/implementation/otp.repositories");
const refreshToken_repositories_1 = require("../repositories/implementation/refreshToken.repositories");
const passport_1 = __importDefault(require("passport"));
require("../config/passport");
const auth_middleware_1 = require("../middlewares/auth.middleware");
const router = (0, express_1.Router)();
const userRepository = new user_repositories_1.UserRepository();
const otpRepository = new otp_repositories_1.OtpRepository();
const refreshTokenRepository = new refreshToken_repositories_1.RefreshTokenRepository();
const authService = new auth_services_1.AuthService(userRepository, otpRepository, refreshTokenRepository);
const authController = new auth_controller_1.AuthController(authService);
router.use(passport_1.default.initialize());
router.post("/signup", authController.signup.bind(authController));
router.post("/login", authController.login.bind(authController));
router.post("/verify-otp", authController.verifyOtpAndRegister.bind(authController));
router.post("/resend-otp", authController.resendOtp.bind(authController));
router.post("/forgot-password", authController.forgotPassword.bind(authController));
router.post("/forgotPassword-otp", authController.verifyForgotPasswordOtp.bind(authController));
router.post("/update-password", authController.updateNewPassword.bind(authController));
router.post("/refresh-token", authController.refreshToken.bind(authController));
router.post("/logout", authController.logout.bind(authController));
router.get("/me", auth_middleware_1.verifyAccessToken, authController.getMe.bind(authController));
router.get("/google", passport_1.default.authenticate("google", { scope: ["profile", "email"] }));
router.get("/google/callback", passport_1.default.authenticate("google", { session: false }), (req, res, next) => authController.googleAuth(req, res, next));
router.post("/google-login", authController.loginWithGoogle.bind(authController));
exports.default = router;
